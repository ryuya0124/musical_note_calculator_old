name: Build and Release Android App (Debug)

on:
  workflow_dispatch:  # 手動実行を有効にする

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # ソースコードをチェックアウト
      - name: Checkout code
        uses: actions/checkout@v3

      # JavaとAndroid SDKの設定
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17' # プロジェクトのJavaバージョンに合わせる

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Gradleスクリプトに実行権限を付与
      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      # デバッグ用APKをビルド
      - name: Build Android App (Debug)
        run: ./gradlew assembleDebug

      # APKの名前を変更
      - name: Rename APK
        run: mv app/build/outputs/apk/debug/app-debug.apk app/build/outputs/apk/debug/musical.note.calculator.apk

      - name: Fetch tags from remote
        run: git fetch --tags
    
      - name: Determine next version tag
        id: version
        run: |
          # 最新タグを取得
          latest_tag=$(git tag --list 'v*' --sort=-v:refname | head -n 1)
          echo "Latest tag found: $latest_tag"  # 最新タグのログ出力
          
          if [ -z "$latest_tag" ]; then
            echo "next_tag=v1" >> $GITHUB_ENV
          else
            # "v" を取り除いて、次のバージョン番号を計算
            next_version=$(( ${latest_tag#v} + 1 ))
            next_tag="v$next_version"
            echo "Calculated next tag: $next_tag"  # 次のタグのログ出力
            echo "next_tag=$next_tag" >> $GITHUB_ENV
          fi
        shell: bash

      # 成果物のアップロード
      - name: Upload Debug APK to GitHub Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: app/build/outputs/apk/debug/musical.note.calculator.apk # リネーム後のAPKパス
          tag: ${{ env.next_tag }} # 計算された次のバージョンタグ
          name: ${{ env.next_tag }} # リリース名としてタグをそのまま使用
          body: ${{ github.event.head_commit.message }} # コミットメッセージをReleaseの説明に使用
          draft: false
          prerelease: false
          skipIfReleaseExists: true # タグがすでに存在する場合はスキップ
